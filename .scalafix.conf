rules = [
  DisableSyntax
]
DisableSyntax.noReturns = true
DisableSyntax.regex = [
  {
    id = "todo"
    pattern = "(TODO\\s*[^(]|FIXME)"
    message = "Must be in format TODO (<jira url>)"
  }
  {
    id = "ignore"
    pattern = "@Ignore\\s*[^(]"
    message = "Must be in format: '@Ignore(<jira url>)'"
  }
  {
    id = "scalaz"
    pattern = "scalaz"
    message = "scalaz is prohibited"
  }
  {
    id = "now"
    pattern = "Instant.now"
    message = "Don't use Instant.now"
  }
  {
    id = "maxPermSize"
    pattern = "(-XX:MaxPermSize|-XX:PermSize)"
    message = "MaxPermSize and PermSize are deprecated"
  }
  {
    id = "file-headers"
    pattern = "(\\* Created by [a-z]+ on|Copyright .* KEYWORD|\\@author)"
    message = "No file headers"
  }
  {
    id = "logging"
    pattern = "(println|isDebugEnabled)"
    message = "Use a logger"
  }
  {
    id = "banned-apis"
    pattern = "(KEYWORD.persist|KEYWORD.unsafe|KEYWORD.upsert)"
    message = "Don't use banned APIs"
  }
  {
    id = "currency-apis"
    pattern = "OldCurrencyUnit"
    message = "Use CurrencyUnit"
  }
  {
    id = "currency-string"
    pattern = "(ccy: String|ccy: Option\\[String\\]|currency: String|Ccy: String|Ccy: Option\\[String\\])"
    message = "Use CurrencyUnit"
  }
  {
    id = "methods"
    pattern = "def [A-Z]"
    message = "Use camelCase"
  }
  {
    id = "async-wrappers"
    pattern = "(async[(]|aseq)"
    message = "Use collection.apar"
  }
  {
    id = "thread-blocking"
    pattern = "Thread.sleep"
    message = "Avoid blocking"
  }
  {
    id = "import-statements"
    pattern = "import o.p.[a-zA-Z]+"
    message = "Use import o.p._"
  }
  {
    id = "javaconversions"
    pattern = "scala.collection.JavaConversions"
    message = "Java conversions is prohibited"
  }
  {
    id = "backticks"
    pattern = "`.*`"
    message = "Backtick escaping"
  }
]